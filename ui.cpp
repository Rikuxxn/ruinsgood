//=============================================================================
//
// UI処理 [ui.cpp]
// Author : TANEKAWA RIKU
//
//=============================================================================

//*****************************************************************************
// インクルードファイル
//*****************************************************************************
#include "ui.h"
#include "manager.h"

//=============================================================================
// コンストラクタ
//=============================================================================
CUi::CUi(int nPriority) : CObject(nPriority)
{
	// 値のクリア
	m_pVtxBuff = NULL;		// 頂点バッファへのポインタ
	m_pos = INIT_VEC3;
	m_fWidth = 0.0f;			// 幅
	m_fHeight = 0.0f;			// 高さ
	m_nIdxTexture = 0;
	memset(m_szPath, 0, sizeof(m_szPath));
	m_type = TYPE_PAUSE;
}
//=============================================================================
// デストラクタ
//=============================================================================
CUi::~CUi()
{
	// なし
}
//=============================================================================
// 生成処理
//=============================================================================
CUi* CUi::Create(TYPE type, D3DXVECTOR3 pos, float fWidth, float fHeight)
{
	CUi* pUi = NULL;

	switch (type)
	{
	case TYPE_PAUSE:
		pUi = new CPauseUi;
		pUi->SetPath("data/TEXTURE/ui_pause.png");
		break;
	case TYPE_MASK:
		pUi = new CMaskUi;
		pUi->SetPath("data/TEXTURE/ui_mask.png");
		break;
	default:
		pUi = new CUi;
		break;
	}

	pUi->SetPos(pos);
	pUi->SetSize(fWidth,fHeight);

	// 初期化処理
	pUi->Init();

	return pUi;
}
//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CUi::Init(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャの取得
	m_nIdxTexture = CManager::GetTexture()->Register(m_szPath);

	//頂点バッファの生成
	pDevice->CreateVertexBuffer(sizeof(VERTEX_2D) * 4,
		D3DUSAGE_WRITEONLY,
		FVF_VERTEX_2D,
		D3DPOOL_MANAGED,
		&m_pVtxBuff,
		NULL);

	VERTEX_2D* pVtx = NULL;// 頂点情報へのポインタ

	// 頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y + m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y + m_fHeight, 0.0f);

	// rhwの設定
	pVtx[0].rhw = 1.0f;
	pVtx[1].rhw = 1.0f;
	pVtx[2].rhw = 1.0f;
	pVtx[3].rhw = 1.0f;

	// 頂点カラーの設定
	pVtx[0].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[1].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[2].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);
	pVtx[3].col = D3DXCOLOR(1.0f, 1.0f, 1.0f, 1.0f);

	// テクスチャ座標の設定
	pVtx[0].tex = D3DXVECTOR2(0.0f, 0.0f);
	pVtx[1].tex = D3DXVECTOR2(1.0f, 0.0f);
	pVtx[2].tex = D3DXVECTOR2(0.0f, 1.0f);
	pVtx[3].tex = D3DXVECTOR2(1.0f, 1.0f);

	// 頂点バッファをアンロックする
	m_pVtxBuff->Unlock();

	return S_OK;
}
//=============================================================================
// 終了処理
//=============================================================================
void CUi::Uninit(void)
{
	// 頂点バッファの破棄
	if (m_pVtxBuff != NULL)
	{
		m_pVtxBuff->Release();
		m_pVtxBuff = NULL;
	}

	// オブジェクトの破棄(自分自身)
	this->Release();
}
//=============================================================================
// 更新処理
//=============================================================================
void CUi::Update(void)
{
	VERTEX_2D* pVtx;// 頂点情報へのポインタ

	// 頂点バッファをロックし、頂点情報へのポインタを取得
	m_pVtxBuff->Lock(0, 0, (void**)&pVtx, 0);

	// 頂点座標の設定
	pVtx[0].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[1].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y - m_fHeight, 0.0f);
	pVtx[2].pos = D3DXVECTOR3(m_pos.x - m_fWidth, m_pos.y + m_fHeight, 0.0f);
	pVtx[3].pos = D3DXVECTOR3(m_pos.x + m_fWidth, m_pos.y + m_fHeight, 0.0f);

	//頂点バッファをアンロックする
	m_pVtxBuff->Unlock();
}
//=============================================================================
// 描画処理
//=============================================================================
void CUi::Draw(void)
{
	// デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// 頂点バッファをデータストリームに設定
	pDevice->SetStreamSource(0, m_pVtxBuff, 0, sizeof(VERTEX_2D));

	// 頂点フォーマットの設定
	pDevice->SetFVF(FVF_VERTEX_2D);

	// テクスチャの設定
	pDevice->SetTexture(0, CManager::GetTexture()->GetAddress(m_nIdxTexture));

	// ポリゴンの描画
	pDevice->DrawPrimitive(D3DPT_TRIANGLESTRIP, 0, 2);
}


//=============================================================================
// ポーズUIのコンストラクタ
//=============================================================================
CPauseUi::CPauseUi()
{
	// 値のクリア
}
//=============================================================================
// ポーズUIのデストラクタ
//=============================================================================
CPauseUi::~CPauseUi()
{
	// なし
}
//=============================================================================
// ポーズUIの初期化処理
//=============================================================================
HRESULT CPauseUi::Init(void)
{
	// UIの初期化処理
	CUi::Init();

	return S_OK;
}
//=============================================================================
// ポーズUIの終了処理
//=============================================================================
void CPauseUi::Uninit(void)
{
	// UIの終了処理
	CUi::Uninit();
}
//=============================================================================
// ポーズUIの更新処理
//=============================================================================
void CPauseUi::Update(void)
{
	// UIの更新処理
	CUi::Update();
}
//=============================================================================
// ポーズUIの描画処理
//=============================================================================
void CPauseUi::Draw(void)
{
	// UIの描画処理
	CUi::Draw();
}


//=============================================================================
// 仮面取得UIのコンストラクタ
//=============================================================================
CMaskUi::CMaskUi()
{
	// 値のクリア

}
//=============================================================================
// 仮面取得UIのデストラクタ
//=============================================================================
CMaskUi::~CMaskUi()
{
	// なし
}
//=============================================================================
// 仮面取得UIの初期化処理
//=============================================================================
HRESULT CMaskUi::Init(void)
{
	// UIの初期化処理
	CUi::Init();

	return S_OK;
}
//=============================================================================
// 仮面取得UIの終了処理
//=============================================================================
void CMaskUi::Uninit(void)
{
	// UIの終了処理
	CUi::Uninit();
}
//=============================================================================
// 仮面取得UIの更新処理
//=============================================================================
void CMaskUi::Update(void)
{
	// UIの更新処理
	CUi::Update();
}
//=============================================================================
// 仮面取得UIの描画処理
//=============================================================================
void CMaskUi::Draw(void)
{
	// UIの描画処理
	CUi::Draw();
}
